{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newTask","list","key","value","this","setState","length","id","Math","random","slice","unshift","updatedList","filter","task","className","type","placeholder","onChange","e","updateInput","target","onClick","addTask","map","deleteTask","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPA2FeA,G,kBAvFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IALS,E,yEASPC,EAAKC,GAEfC,KAAKC,SAAL,eACGH,EAAMC,M,gCAKT,GAAIC,KAAKL,MAAMC,QAAQM,OAAvB,CAGA,IAAMN,EAAU,CACdO,GAAI,EAAIC,KAAKC,SACbN,MAAOC,KAAKL,MAAMC,QAAQU,SAItBT,EAAI,YAAOG,KAAKL,MAAME,MAG5BA,EAAKU,QAAQX,GAGbI,KAAKC,SAAS,CACZL,QAAS,GACTC,Y,iCAIOM,GAET,IAGMK,EAHI,YAAOR,KAAKL,MAAME,MAGHY,QAAO,SAAAC,GAAI,OAAIP,IAAOO,EAAKP,MAGpDH,KAAKC,SAAS,CACZJ,KAAMW,M,+BAIA,IAAD,OACP,OACE,yBAAKG,UAAU,sCACb,yBAAKA,UAAU,8BACb,wBAAIA,UAAU,2BAAd,6BAEA,yBAAKA,UAAU,kCAEb,yBAAKA,UAAU,qDACb,2BAAOC,KAAK,OAAOD,UAAU,uFAAuFE,YAAY,qBAAqBd,MAAOC,KAAKL,MAAMC,QAASkB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOlB,UACpO,4BAAQY,UAAU,6GAA6GO,QAAS,kBAAM,EAAKC,YAAnJ,QAGF,yBAAKR,UAAU,+BAEb,6BAEIX,KAAKL,MAAME,KAAKuB,KAAI,SAAAV,GAClB,OACE,uBAAGZ,IAAKY,EAAKP,GAAIQ,UAAU,8DACzB,0BAAMA,UAAU,UAAUD,EAAKX,OAC/B,4BAAQmB,QAAS,kBAAM,EAAKG,WAAWX,EAAKP,KAAKQ,UAAU,kBAA3D,kB,GAzENW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1e21d86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './tailwind.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newTask: \"\",\n      list: []\n    }\n  }\n\n  updateInput(key, value) {\n    // update component state\n    this.setState({\n      [key]: value\n    })\n  }\n\n  addTask() {\n    if(!this.state.newTask.length) return;\n\n    // create task with unique id\n    const newTask = {\n      id: 1 + Math.random(),\n      value: this.state.newTask.slice()\n    }\n\n    // copy of current list of tasks\n    const list = [...this.state.list];\n\n    // add the new task to the list\n    list.unshift(newTask);\n\n    // update state with new list and reset the input\n    this.setState({\n      newTask: \"\",\n      list\n    })\n  }\n\n  deleteTask(id) {\n    // copy current list of tasks\n    const list = [...this.state.list];\n    \n    // filter out task being deleted\n    const updatedList = list.filter(task => id !== task.id);\n\n    // update the state\n    this.setState({\n      list: updatedList\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App font-sans bg-gray-300 h-screen\">\n        <div className=\"container max-w-sm mx-auto\">\n          <h1 className=\"text-3xl py-5 font-bold\">What are you going to do?</h1>\n\n          <div className=\"max-w-sm overflow-hidden  mb-0\">\n\n            <div className=\"new-task flex items-center shadow-md rounded mb-3\">\n              <input type=\"text\" className=\"flex-1 appearance-none border border-r-0 rounded-l px-4 py-3 zm-2 mr-0 font-semibold\" placeholder=\"Write task here...\" value={this.state.newTask} onChange={e => this.updateInput(\"newTask\", e.target.value)} />\n              <button className=\"bg-teal-500 hover:bg-teal-700 text-white py-3 px-4 rounded rounded-l-none border border-teal-500 m-z2 ml-0\" onClick={() => this.addTask()}>Add</button>\n            </div>\n\n            <div className=\"bg-white  rounded shadow-lg\">\n\n              <div>\n                {\n                  this.state.list.map(task => {\n                    return (\n                      <p key={task.id} className=\"flex text-gray-800 even:bg-gray-200 task font-semibold p-3\">\n                        <span className=\"flex-1\">{task.value}</span>\n                        <button onClick={() => this.deleteTask(task.id)} className=\"px-3 flex-none\">X</button>\n                      </p>\n                    );\n                  })\n                }\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}